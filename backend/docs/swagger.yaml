definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  hackathons-app_internal_models.Hackathon:
    properties:
      createdAt:
        type: string
      dateBegin:
        type: string
      dateEnd:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
      users:
        items:
          $ref: '#/definitions/hackathons-app_internal_models.User'
        type: array
    type: object
  hackathons-app_internal_models.Role:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Admin
    - Base
  hackathons-app_internal_models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      firstName:
        type: string
      hackathons:
        items:
          $ref: '#/definitions/hackathons-app_internal_models.Hackathon'
        type: array
      hashedPassword:
        type: string
      id:
        type: integer
      role:
        $ref: '#/definitions/hackathons-app_internal_models.Role'
      secondName:
        type: string
      telegramID:
        type: string
      updatedAt:
        type: string
    type: object
  internal_api_http_v1_auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  internal_api_http_v1_auth.LoginResponse:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  internal_api_http_v1_auth.RefreshRequest:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    required:
    - accessToken
    - refreshToken
    type: object
  internal_api_http_v1_auth.RegisterRequest:
    properties:
      confirmPassword:
        type: string
      email:
        type: string
      first_name:
        type: string
      password:
        type: string
      second_name:
        type: string
    required:
    - confirmPassword
    - email
    - password
    type: object
  internal_api_http_v1_auth.ResponseRefresh:
    properties:
      accessToken:
        type: string
    type: object
  internal_api_http_v1_hackathon.CreateRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  internal_api_http_v1_hackathon.HackathonResponse:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  internal_api_http_v1_user.CreateRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      second_name:
        type: string
    required:
    - email
    - first_name
    - second_name
    type: object
  internal_api_http_v1_user.Response:
    properties:
      email:
        type: string
      first_name:
        type: string
      second_name:
        type: string
    type: object
  internal_api_http_v1_user.ResponseHackathon:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  internal_api_http_v1_user.ResponseWithHackathons:
    properties:
      email:
        type: string
      first_name:
        type: string
      hackathons:
        items:
          $ref: '#/definitions/internal_api_http_v1_user.ResponseHackathon'
        type: array
      second_name:
        type: string
    type: object
host: localhost:4242
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user using email and password and return access and refresh
        tokens
      parameters:
      - description: Login credentials
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/internal_api_http_v1_auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in
          schema:
            $ref: '#/definitions/internal_api_http_v1_auth.LoginResponse'
        "400":
          description: Invalid input
        "401":
          description: Invalid password
        "500":
          description: Internal server error
      summary: Login a user and return tokens
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: This endpoint refreshes the access token using a valid refresh
        token.
      parameters:
      - description: Request body containing access and refresh tokens
        in: body
        name: refreshRequest
        required: true
        schema:
          $ref: '#/definitions/internal_api_http_v1_auth.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_api_http_v1_auth.ResponseRefresh'
        "400":
          description: Invalid input or token issues
        "401":
          description: Access token is not expired
        "500":
          description: Internal server error
      security:
      - BearerAuth: []
      summary: Refresh Access Token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: .
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/internal_api_http_v1_auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
      summary: Register a new user
      tags:
      - auth
  /hackathons:
    get:
      consumes:
      - application/json
      description: Получение списка всех хакатонов
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_api_http_v1_hackathon.HackathonResponse'
            type: array
      security:
      - BearerAuth: []
      summary: Get all hackathons
      tags:
      - hackathons
    post:
      consumes:
      - application/json
      description: Создание нового хакатона
      parameters:
      - description: Hackathon data
        in: body
        name: hackathon
        required: true
        schema:
          $ref: '#/definitions/internal_api_http_v1_hackathon.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
      security:
      - BearerAuth: []
      summary: Create a new hackathon
      tags:
      - hackathons
  /hackathons/{id}:
    delete:
      consumes:
      - application/json
      description: Удаление хакатона по ID
      parameters:
      - description: Hackathon ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Delete hackathon by ID
      tags:
      - hackathons
    get:
      consumes:
      - application/json
      description: Получение хакатона по ID
      parameters:
      - description: Hackathon ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hackathons-app_internal_models.Hackathon'
      security:
      - BearerAuth: []
      summary: Get hackathon by ID
      tags:
      - hackathons
    put:
      consumes:
      - application/json
      description: Обновление данных хакатона
      parameters:
      - description: Hackathon ID
        in: path
        name: id
        required: true
        type: integer
      - description: Hackathon data
        in: body
        name: hackathon
        required: true
        schema:
          $ref: '#/definitions/hackathons-app_internal_models.Hackathon'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hackathons-app_internal_models.Hackathon'
      security:
      - BearerAuth: []
      summary: Update hackathon data
      tags:
      - hackathons
  /user/:
    get:
      consumes:
      - application/json
      description: Возвращает список всех пользователей.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_api_http_v1_user.Response'
            type: array
      security:
      - BearerAuth: []
      summary: Получить всех пользователей
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Создаёт нового пользователя в системе.
      parameters:
      - description: Данные пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/internal_api_http_v1_user.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
      security:
      - BearerAuth: []
      summary: Создать нового пользователя
      tags:
      - user
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Удаляет пользователя по заданному ID.
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Удалить пользователя по ID
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Возвращает информацию о пользователе по заданному ID.
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_api_http_v1_user.Response'
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получить пользователя по ID
      tags:
      - user
  /user/{userId}/{hackathonId}:
    patch:
      consumes:
      - application/json
      description: Добавляет хакатон пользователю по ID.
      parameters:
      - description: ID пользователя
        in: path
        name: userId
        required: true
        type: integer
      - description: ID хакатона
        in: path
        name: hackathonId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Добавить хакатон пользователю
      tags:
      - user
  /user/hackathons/:
    get:
      consumes:
      - application/json
      description: Возвращает список всех пользователей и их хакатонов.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_api_http_v1_user.ResponseWithHackathons'
            type: array
      security:
      - BearerAuth: []
      summary: Получить всех пользователей с хакатонами
      tags:
      - user
securityDefinitions:
  BearerAuth:
    description: Enter the token with the `Bearer ` prefix, e.g. "Bearer abcde12345".
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
